@mixin dc($dynamic: all 0.2s) {
  -webkit-transition: $dynamic;
  -moz-transition: $dynamic;
  -ms-transition: $dynamic;
  -o-transition: $dynamic;
  transition: $dynamic;
}

@mixin radius($angle) {
  border-radius: $angle;
  -webkit-border-radius: $angle;
  -moz-border-radius: $angle;
}

@mixin circle($size, $bgcolor) {
  height: $size;
  height: size;
  @include radius($size);
  background: $bgcolor;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  -moz-opacity: $opacity;
  filter: alpha(opacity = $opacity * 100);
}

@mixin box-shadow($x, $y, $blur, $color) {
  -webkit-box-shadow: $x $y $blur $color;
  -moz-box-shadow: $x $y $blur $color;
  box-shadow: $x $y $blur $color;
}

@mixin shadow($x, $y, $blur, $color) {
  -webkit-text-shadow: $x $y $blur $color;
  -moz-text-shadow: $x $y $blur $color;
  text-shadow: $x $y $blur $color;
}

@mixin linear-gradient($from, $to) {
  background-color: $to;
  background-image: -moz-linear-gradirnt($from, $to);
  background-image: -o-linear-gradient($from, $to);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, $from), color-stop(1, $to));
  background-image: -webkit-linear-gradient($from, $to);
  background-image: -ms-linear-gradient($from, $to);
  background-image: linear-gradient($from, $to);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0 );
}

@mixin linear-gradient-x($from, $to) {
  background-color: $to;
  background-image: -moz-linear-gradirnt(left,$from, $to);
  background-image: -o-linear-gradient(left,$from, $to);
  background-image: -webkit-gradient(linear, left top, right top, color-stop(0, $from), color-stop(1, $to));
  background-image: -webkit-linear-gradient($from, $to);
  background-image: -ms-linear-gradient($from, $to);
  background-image: linear-gradient(to right,$from, $to);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=1 );
}

@mixin triangle($size, $color, $align, $type: 1) {
  height: 0;
  width: 0;
  @if $align == top {
    border-bottom: $size * $type solid $color;
    border-left: $size / 2 solid transparent;
    border-right: $size / 2 solid transparent;
  }
  @else if $align == right {
    border-left: $size * $type solid $color;
    border-top: $size / 2 solid transparent;
    border-bottom: $size / 2 solid transparent;
  }
  @else if $align == bottom {
    border-top: $size * $type solid $color;
    border-left: $size / 2 solid transparent;
    border-right: $size / 2 solid transparent;
  }
  @else if $align == left {
    border-right: $size * $type solid $color;
    border-top: $size / 2 solid transparent;
    border-bottom: $size / 2 solid transparent;
  }
  @else if $align == right-top {
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
  }
  @else if $align == left-top {
    border-left: $size solid $color;
    border-bottom: $size solid transparent;
  }
  @else if $align == right-bottom {
    border-right: $size solid $color;
    border-top: $size solid transparent;
  }
  @else if $align == left-bottom {
    border-left: $size solid $color;
    border-top: $size solid transparent;
  }
}

@mixin breakpoint($point) {
  @if $point == pc {
    @media only screen and (max-width: 1024px) {
      @content;
    }
  }
  @else if $point == pad {
    @media only screen and (max-width: 768px) {
      @content;
    }
  }
  @else if $point == mobile {
    @media only screen and (max-width: 320px) {
      @content;
    }
  }
}

@mixin flex-center {
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-b {
  -webkit-box-flex: 1;
  -ms-flex: 1;
  -webkit-flex: 1;
  flex: 1;
}

@mixin translate-center {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}

@mixin translate-clear {
  position: static;
  top: auto;
  left: auto;
  -webkit-transform: none;
  transform: none;
}

@mixin animation($delay, $duration, $animation, $frequency, $forwards,$timing) {
  -webkit-animation-delay: $delay;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation;
  -webkit-animation-iteration-count: $frequency;
  -webkit-animation-fill-mode: $forwards;
  -webkit-animation-timing-function: $timing;
  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-iteration-count: $frequency;
  -moz-animation-fill-mode: $forwards;
  -o-animation-delay: $delay;
  -o-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-iteration-count: $frequency;
  -moz-animation-timing-function: $timing;
  -o-animation-fill-mode: $forwards;
  -o-animation-timing-function: $timing;
  animation-delay: $delay;
  animation-duration: $duration;
  animation-name: $animation;
  animation-iteration-count: $frequency;
  animation-fill-mode: $forwards;
  animation-timing-function: $timing;
}
